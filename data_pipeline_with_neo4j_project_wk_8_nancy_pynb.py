# -*- coding: utf-8 -*-
"""Data_pipeline_with_neo4j_project_wk_8_Nancy.pynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i-YheyyooG04SgYaqSdWH5fYBw5k_fvR
"""

# Import required libraries
!pip install neo4j
from neo4j import GraphDatabase
import pandas as pd
import psycopg2

# Define Neo4j connection details
neo4j_uri = "neo4j+s://a90fe3af.databases.neo4j.io"
neo4j_user = "neo4j"
neo4j_password = "xXPKtNX5vkz-tZQrCGwzls9TOVSgyJzkvF5Ckdvp2BU"
driver = GraphDatabase.driver(neo4j_uri, auth=(neo4j_user, neo4j_password))

!curl ipecho.net/plain

# Define Postgres connection details
pg_host = "34.30.81.146"
pg_database = "neo4jproject"
pg_user = "telcom_dataneo4jproj"
pg_password = "test"

# Define Neo4j query to extract data
neo4j_query =  """
MATCH (c:Customer)-[:HAS_SUBSCRIPTION]->(s:Subscription)-[:USES]->(sv:Service)
RETURN c.customer_id AS customer_id, s.subscription_id AS subscription_id,
       sv.service_id AS service_id, s.start_date AS start_date,
       s.end_date AS end_date, s.price AS price
"""

# Returning a Pandas DataFrame
with driver.session() as session:
    result = session.run(neo4j_query)
    df = pd.DataFrame([r.values() for r in result], columns=result.keys())

driver.close()

# Define function to transform data
def transform_data(df):
# Convert date fields to datetime objects
 transform_data(df)['start_date'] = pd.to_datetime(transform_data(df)['start_date'])
 transform_data(df)['end_date'] = pd.to_datetime(transform_data(df)['end_date'])
# Remove null values
 transform_data(df).dropna(inplace=True)
 return df

def insert_data(dataframe):
    for index, row in dataframe.iterrows():
        query = f"INSERT INTO subscriptions (customer_id, subscription_id, service_id, start_date, end_date, price) VALUES ({row['customer_id']}, {row['subscription_id']}, {row['service_id']}, '{row['start_date'].date()}', '{row['end_date'].date()}', {row['price']})"
        cur.execute(query)
    conn.commit()
    conn.close()

# Call main function
def main():
  if __name__ == "__main__":
    main()